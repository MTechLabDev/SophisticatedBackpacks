plugins {
    id 'java-library'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '1.0.14'
    id "org.sonarqube" version "5.0.0.4638"
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

version = "${project.minecraft_version}-${project.mod_version}.${getBuildNumber()}${getStable()}"
group = mod_group_id

repositories {
    mavenCentral()
    maven { url "https://maven.tterrag.com/" }
    maven { url = "https://modmaven.dev/" }
    maven { url "https://minecraft.curseforge.com/api/maven/" }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven { url "https://maven.blamejared.com/" }
    maven {
        name = "GitHubPackages"
        url = uri("https://maven.pkg.github.com/p3pp3rf1y/sophisticatedcore")
        credentials {
            username = System.getenv("USERNAME")
            password = System.getenv("READ_PACKAGES_TOKEN")
        }
        content {
            includeGroupByRegex "sophisticatedcore.*"
        }
    }
}

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
    version = project.neo_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    accessTransformers = project.files('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            systemProperty 'forge.logging.console.level', 'debug'
            systemProperty 'mixin.env.disableRefMap', 'true'
        }

        client {
            client()
        }

        client2 {
            client()

            programArguments.addAll '--username', 'Dev2'
        }

        server {
            server()
            programArgument '--nogui'
        }

        data {
            data()
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()

    /*
            if (findProject(':SophisticatedCore') != null) {
                modSource project(':SophisticatedCore').sourceSets.main
            }
    */
        }
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

dependencies {
    if (findProject(':SophisticatedCore') != null) {
        dependencies.implementation project(':SophisticatedCore')
    } else {
        dependencies.implementation("sophisticatedcore:sophisticatedcore:${sc_version}") {
            transitive = false
        }
        dependencies.testImplementation("sophisticatedcore:sophisticatedcore:${sc_version}") {
            transitive = false
        }
    }

//    implementation files('/libs/sophisticatedcore-1.20.4-0.6.18.-SNAPSHOT.jar')

    compileOnly "mezz.jei:jei-${jei_mc_version}:${jei_version}"
    localRuntime "mezz.jei:jei-${jei_mc_version}:${jei_version}"
    compileOnly "curse.maven:curios-1037991:${curios_cf_file_id}"
    localRuntime "curse.maven:curios-1037991:${curios_cf_file_id}"
    compileOnly "curse.maven:balm-531761:${balm_cf_file_id}"
    localRuntime "curse.maven:balm-531761:${balm_cf_file_id}"
    compileOnly "curse.maven:craftingtweaks-233071:${crafting_tweaks_cf_file_id}"
    localRuntime "curse.maven:craftingtweaks-233071:${crafting_tweaks_cf_file_id}"
    compileOnly "curse.maven:chipped-456956:${chipped_cf_file_id}"
    localRuntime "curse.maven:chipped-456956:${chipped_cf_file_id}"
    compileOnly "curse.maven:athena-841890:${athena_cf_file_id}"
    localRuntime "curse.maven:athena-841890:${athena_cf_file_id}"
    compileOnly "curse.maven:resourcefullib-570073:${resourcefullib_cf_file_id}"
    localRuntime "curse.maven:resourcefullib-570073:${resourcefullib_cf_file_id}"
/*
    compileOnly "vazkii.botania:Botania:${botania_version}:api")
    runtimeOnly "vazkii.botania:Botania:${botania_version}")
    compileOnly "vazkii.patchouli:Patchouli:${patchouli_version}:api")
    runtimeOnly "vazkii.patchouli:Patchouli:${patchouli_version}")
*/
}

var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            neo_version         : neo_version, neo_version_range: neo_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_issue_tracker_url: mod_issue_tracker_url, mod_logo_file: mod_logo_file, mod_credits: mod_credits,
            mod_authors         : mod_authors, mod_description: mod_description, mod_display_url: mod_display_url,
            mod_full_version    : "${project.mod_version}.${getBuildNumber()}${getStable()}",
            sc_version          :"[" + sc_version.substring(sc_version.indexOf("-") + 1, sc_version.lastIndexOf(',')) + ".+,)"
    ]
    inputs.properties replaceProperties

    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}

// Include the output of "generateModMetadata" as an input directory for the build
// this works with both building through Gradle and the IDE.
sourceSets.main.resources.srcDir generateModMetadata
// To avoid having to run "generateModMetadata" manually, make it run on every project reload
neoForge.ideSyncTask generateModMetadata

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

jar {
    manifest {
        attributes(["Specification-Title"     : project.mod_id,
                    "Specification-Vendor"    : project.mod_id,
                    "Specification-Version"   : "1",
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : "${version}",
                    "Implementation-Vendor"   : project.mod_id,
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")],)
    }
}


static def getBuildNumber() {
    if (System.getenv("GITHUB_RUN_NUMBER") != null) {
        return System.getenv("GITHUB_RUN_NUMBER").toString()
    }
    return ""
}

static def getStable() {
    if (System.getenv("GITHUB_REF") == null || System.getenv("GITHUB_REF").endsWith("-dev")) {
        return "-SNAPSHOT"
    }
    return ""
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("${github_package_url}")
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            artifactId = mod_id
            from(components.java)
        }
    }
}

sonarqube {
    properties {
        property "sonar.projectName", "${mod_id}"
        property "sonar.projectKey", "${sonar_project_key}"
    }
}

task printVersionName {
    println "version:" + project.version
}
